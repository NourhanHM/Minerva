// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Minerva.Data;

#nullable disable

namespace Minerva.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Admin", b =>
                {
                    b.Property<int>("Admin_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Admin_id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Admin_id");

                    b.ToTable("AdminTb", (string)null);
                });

            modelBuilder.Entity("Assignment", b =>
                {
                    b.Property<int>("Assignment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Assignment_id"));

                    b.Property<byte[]>("AssignmentFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("Doctor_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("ModelAnswer")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Subject_id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Total_grade")
                        .HasColumnType("int");

                    b.HasKey("Assignment_id");

                    b.ToTable("AssignmentTb", (string)null);
                });

            modelBuilder.Entity("Minerva.Models.Attemp", b =>
                {
                    b.Property<int>("Attemp_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Attemp_id"));

                    b.Property<byte[]>("Answer")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Assignment_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Enrollment_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Grade")
                        .HasColumnType("float");

                    b.Property<int>("Student_id")
                        .HasColumnType("int");

                    b.HasKey("Attemp_id");

                    b.HasIndex("Assignment_id");

                    b.HasIndex("Student_id");

                    b.ToTable("AttempTb", (string)null);
                });

            modelBuilder.Entity("Minerva.Models.Doctor", b =>
                {
                    b.Property<int>("Doctor_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Doctor_id"));

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Doctor_id");

                    b.ToTable("DoctorTb", (string)null);
                });

            modelBuilder.Entity("Minerva.Models.Grade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradeId"));

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int");

                    b.Property<double>("GradeValue")
                        .HasColumnType("float");

                    b.Property<int?>("QuizId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("GradeId");

                    b.HasIndex("AssignmentId");

                    b.HasIndex("QuizId");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("GradesTb");
                });

            modelBuilder.Entity("Minerva.Models.Lecture", b =>
                {
                    b.Property<int>("Lec_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Lec_id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Doctor_id")
                        .HasColumnType("int");

                    b.Property<byte[]>("FilePath")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Subject_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Upload_Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Lec_id");

                    b.ToTable("LectureTb");
                });

            modelBuilder.Entity("Minerva.Models.MCQOptionTb", b =>
                {
                    b.Property<int>("Option_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Option_id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<string>("Option_text")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("Question_id")
                        .HasColumnType("int");

                    b.HasKey("Option_id");

                    b.HasIndex("Question_id");

                    b.ToTable("MCQOptionTb", (string)null);
                });

            modelBuilder.Entity("Minerva.Models.QAttempTb", b =>
                {
                    b.Property<int>("Attempt_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Q_attemp_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Attempt_id"));

                    b.Property<DateTime>("Enrollment_date")
                        .HasColumnType("datetime2")
                        .HasColumnName("Enrollment_date");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Feedback");

                    b.Property<int>("Quiz_id")
                        .HasColumnType("int")
                        .HasColumnName("Quiz_id");

                    b.Property<int>("Student_id")
                        .HasColumnType("int")
                        .HasColumnName("Student_id");

                    b.Property<int>("score")
                        .HasColumnType("int")
                        .HasColumnName("score");

                    b.HasKey("Attempt_id");

                    b.HasIndex("Quiz_id");

                    b.HasIndex("Student_id");

                    b.ToTable("Q_AttempTb", (string)null);
                });

            modelBuilder.Entity("Minerva.Models.QAttemptAnswerTb", b =>
                {
                    b.Property<int>("Attempt_answer_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Attempt_answer_id"));

                    b.Property<int>("Answer_grade")
                        .HasColumnType("int");

                    b.Property<string>("Answer_text")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Attempt_id")
                        .HasColumnType("int");

                    b.Property<bool>("Is_correct")
                        .HasColumnType("bit");

                    b.Property<int?>("Option_id")
                        .HasColumnType("int");

                    b.Property<int>("Question_id")
                        .HasColumnType("int");

                    b.HasKey("Attempt_answer_id");

                    b.HasIndex("Attempt_id");

                    b.HasIndex("Option_id");

                    b.HasIndex("Question_id");

                    b.ToTable("QAttemptAnswerTb");
                });

            modelBuilder.Entity("Minerva.Models.QQuestionTb", b =>
                {
                    b.Property<int>("Question_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Question_id"));

                    b.Property<string>("Model_answer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Question_grade")
                        .HasColumnType("int");

                    b.Property<string>("Question_text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question_type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Quiz_id")
                        .HasColumnType("int");

                    b.HasKey("Question_id");

                    b.HasIndex("Quiz_id");

                    b.ToTable("Q_QuestionTb", (string)null);
                });

            modelBuilder.Entity("Minerva.Models.Quiz", b =>
                {
                    b.Property<int>("Quiz_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Quiz_id"));

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<int>("Doctor_id")
                        .HasColumnType("int");

                    b.Property<int>("Final_grade")
                        .HasColumnType("int");

                    b.Property<int>("Subject_id")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Quiz_id");

                    b.HasIndex("Doctor_id");

                    b.HasIndex("Subject_id");

                    b.ToTable("QuizTb", (string)null);
                });

            modelBuilder.Entity("Minerva.Models.Student", b =>
                {
                    b.Property<int>("Student_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Student_id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("National_id")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Student_id");

                    b.ToTable("StudentTb", (string)null);
                });

            modelBuilder.Entity("Minerva.Models.StudentSubject", b =>
                {
                    b.Property<int>("Student_id")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Subject_id")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("Student_id", "Subject_id");

                    b.HasIndex("Subject_id");

                    b.ToTable("StudentSubject", (string)null);
                });

            modelBuilder.Entity("Minerva.Models.Subject", b =>
                {
                    b.Property<int>("Subject_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Subject_id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Doctor_id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Student_ids")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Subject_id");

                    b.ToTable("SubjectTb", (string)null);
                });

            modelBuilder.Entity("Minerva.Models.University", b =>
                {
                    b.Property<int>("Uni_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Uni_id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Uni_id");

                    b.ToTable("UniversityTb", (string)null);
                });

            modelBuilder.Entity("Minerva.Models.Attemp", b =>
                {
                    b.HasOne("Assignment", "Assignment")
                        .WithMany("Attempts")
                        .HasForeignKey("Assignment_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Minerva.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Minerva.Models.Grade", b =>
                {
                    b.HasOne("Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId");

                    b.HasOne("Minerva.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId");

                    b.HasOne("Minerva.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Minerva.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");

                    b.Navigation("Quiz");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Minerva.Models.MCQOptionTb", b =>
                {
                    b.HasOne("Minerva.Models.QQuestionTb", "Question")
                        .WithMany("Options")
                        .HasForeignKey("Question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Minerva.Models.QAttempTb", b =>
                {
                    b.HasOne("Minerva.Models.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("Quiz_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Minerva.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("Student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Minerva.Models.QAttemptAnswerTb", b =>
                {
                    b.HasOne("Minerva.Models.QAttempTb", "Attempt")
                        .WithMany()
                        .HasForeignKey("Attempt_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Minerva.Models.MCQOptionTb", "Option")
                        .WithMany()
                        .HasForeignKey("Option_id");

                    b.HasOne("Minerva.Models.QQuestionTb", "Question")
                        .WithMany()
                        .HasForeignKey("Question_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attempt");

                    b.Navigation("Option");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Minerva.Models.QQuestionTb", b =>
                {
                    b.HasOne("Minerva.Models.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("Quiz_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("Minerva.Models.Quiz", b =>
                {
                    b.HasOne("Minerva.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("Doctor_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Minerva.Models.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("Subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Minerva.Models.StudentSubject", b =>
                {
                    b.HasOne("Minerva.Models.Student", "Student")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("Student_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Minerva.Models.Subject", "Subject")
                        .WithMany("StudentSubjects")
                        .HasForeignKey("Subject_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Assignment", b =>
                {
                    b.Navigation("Attempts");
                });

            modelBuilder.Entity("Minerva.Models.QQuestionTb", b =>
                {
                    b.Navigation("Options");
                });

            modelBuilder.Entity("Minerva.Models.Quiz", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Minerva.Models.Student", b =>
                {
                    b.Navigation("StudentSubjects");
                });

            modelBuilder.Entity("Minerva.Models.Subject", b =>
                {
                    b.Navigation("StudentSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
